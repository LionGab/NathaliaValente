#!/bin/bash

# ================================================
# SCRIPT DE INSTALA√á√ÉO DE DEPEND√äNCIAS - CLUBNATH
# ================================================
# Executado automaticamente no in√≠cio de sess√µes Claude Code
# Configura ambiente e instala depend√™ncias necess√°rias

set -e  # Exit on error

echo "üöÄ ClubNath - Configurando ambiente de desenvolvimento..."
echo ""

# ================================================
# 1. VERIFICAR VERS√ïES NECESS√ÅRIAS
# ================================================
echo "üì¶ Verificando vers√µes do Node.js e npm..."

NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
NPM_VERSION=$(npm --version | cut -d'.' -f1)

if [ "$NODE_VERSION" -lt 20 ]; then
    echo "‚ö†Ô∏è  WARNING: Node.js version $NODE_VERSION detected. Recomended: >= 20.19.0"
fi

if [ "$NPM_VERSION" -lt 10 ]; then
    echo "‚ö†Ô∏è  WARNING: npm version $NPM_VERSION detected. Recommended: >= 10.0.0"
fi

echo "‚úÖ Node: $(node --version)"
echo "‚úÖ npm: $(npm --version)"
echo ""

# ================================================
# 2. VERIFICAR SE NODE_MODULES EXISTE
# ================================================
if [ ! -d "node_modules" ]; then
    echo "üì• node_modules n√£o encontrado. Instalando depend√™ncias..."
    npm install
    echo "‚úÖ Depend√™ncias instaladas!"
else
    echo "‚úÖ node_modules j√° existe"

    # Verificar se package.json foi modificado
    if [ "package.json" -nt "node_modules" ]; then
        echo "‚ö° package.json foi modificado. Atualizando depend√™ncias..."
        npm install
        echo "‚úÖ Depend√™ncias atualizadas!"
    fi
fi
echo ""

# ================================================
# 3. VERIFICAR ARQUIVO .env
# ================================================
echo "üîê Verificando arquivo .env..."

if [ ! -f ".env" ]; then
    echo "‚ö†Ô∏è  WARNING: Arquivo .env n√£o encontrado!"
    echo "üìù Criando .env.example como refer√™ncia..."

    cat > .env.example << 'EOF'
# Supabase Configuration
VITE_SUPABASE_URL=https://bbcwitnbnosyfpfjtzkr.supabase.co
VITE_SUPABASE_ANON_KEY=your_anon_key_here

# Instagram OAuth (Optional)
VITE_INSTAGRAM_CLIENT_ID=your_instagram_client_id_here

# Environment
VITE_ENV=development
EOF

    echo "‚ö†Ô∏è  Por favor, crie um arquivo .env baseado em .env.example"
else
    echo "‚úÖ Arquivo .env encontrado"

    # Verificar vari√°veis essenciais
    if ! grep -q "VITE_SUPABASE_URL" .env; then
        echo "‚ö†Ô∏è  WARNING: VITE_SUPABASE_URL n√£o encontrado em .env"
    fi

    if ! grep -q "VITE_SUPABASE_ANON_KEY" .env; then
        echo "‚ö†Ô∏è  WARNING: VITE_SUPABASE_ANON_KEY n√£o encontrado em .env"
    fi
fi
echo ""

# ================================================
# 4. VERIFICAR GIT
# ================================================
echo "üîß Verificando configura√ß√£o Git..."

if [ -d ".git" ]; then
    echo "‚úÖ Reposit√≥rio Git inicializado"

    # Verificar branch atual
    CURRENT_BRANCH=$(git branch --show-current)
    echo "üìç Branch atual: $CURRENT_BRANCH"
else
    echo "‚ö†Ô∏è  WARNING: Git n√£o inicializado"
fi
echo ""

# ================================================
# 5. VERIFICAR FERRAMENTAS DISPON√çVEIS
# ================================================
echo "üõ†Ô∏è  Verificando ferramentas dispon√≠veis..."

command -v git >/dev/null 2>&1 && echo "‚úÖ git" || echo "‚ùå git (n√£o encontrado)"
command -v node >/dev/null 2>&1 && echo "‚úÖ node" || echo "‚ùå node (n√£o encontrado)"
command -v npm >/dev/null 2>&1 && echo "‚úÖ npm" || echo "‚ùå npm (n√£o encontrado)"
command -v tsc >/dev/null 2>&1 && echo "‚úÖ typescript (tsc)" || echo "‚ö†Ô∏è  typescript (instalar via npm)"

echo ""

# ================================================
# 6. EXIBIR INFORMA√á√ïES DO PROJETO
# ================================================
echo "üìä Informa√ß√µes do Projeto:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "Nome: ClubNath - Comunidade de M√£es"
echo "Stack: React 18 + TypeScript + Vite + Supabase"
echo "PWA: Habilitado"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

# ================================================
# 7. COMANDOS √öTEIS
# ================================================
echo "üìö Comandos √∫teis:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "  npm run dev          - Iniciar servidor de desenvolvimento"
echo "  npm run build        - Build de produ√ß√£o"
echo "  npm run test         - Rodar testes"
echo "  npm run typecheck    - Verificar tipos TypeScript"
echo "  npm run lint         - Lint com ESLint"
echo "  npm run format       - Formatar com Prettier"
echo ""
echo "üìñ Consulte CLAUDE.md para guia completo de desenvolvimento"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

# ================================================
# 8. VERIFICA√á√ÉO FINAL
# ================================================
echo "üéØ Status Final:"

WARNINGS=0

# Check node_modules
if [ ! -d "node_modules" ]; then
    echo "‚ùå node_modules n√£o encontrado"
    WARNINGS=$((WARNINGS + 1))
else
    echo "‚úÖ node_modules OK"
fi

# Check .env
if [ ! -f ".env" ]; then
    echo "‚ö†Ô∏è  .env n√£o encontrado"
    WARNINGS=$((WARNINGS + 1))
else
    echo "‚úÖ .env OK"
fi

# Check TypeScript
if npm run typecheck --silent 2>/dev/null; then
    echo "‚úÖ TypeScript OK"
else
    echo "‚ö†Ô∏è  TypeScript tem erros (execute: npm run typecheck)"
fi

echo ""

if [ $WARNINGS -eq 0 ]; then
    echo "‚úÖ Ambiente pronto para desenvolvimento!"
else
    echo "‚ö†Ô∏è  Ambiente configurado com $WARNINGS warning(s)"
    echo "    Resolva os warnings acima antes de come√ßar"
fi

echo ""
echo "üöÄ Pronto para come√ßar! Execute 'npm run dev' para iniciar"
echo ""

exit 0
