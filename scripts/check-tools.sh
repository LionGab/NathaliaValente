#!/bin/bash

# ================================================
# VERIFICA√á√ÉO DE FERRAMENTAS - CLUBNATH
# ================================================
# Verifica se todas as ferramentas necess√°rias est√£o dispon√≠veis

echo "üîç Verificando ferramentas dispon√≠veis no ambiente..."
echo ""

# ================================================
# FUNCTION: Check Command
# ================================================
check_command() {
    local cmd=$1
    local display_name=${2:-$cmd}
    local version_flag=${3:---version}

    if command -v "$cmd" >/dev/null 2>&1; then
        local version=$($cmd $version_flag 2>&1 | head -n 1)
        echo "‚úÖ $display_name - $version"
        return 0
    else
        echo "‚ùå $display_name - n√£o encontrado"
        return 1
    fi
}

# ================================================
# CATEGORIAS DE FERRAMENTAS
# ================================================

echo "üì¶ Node.js & Package Managers:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
check_command node "Node.js" "-v"
check_command npm "npm" "-v"
check_command npx "npx" "-v"
check_command yarn "yarn" "-v" 2>/dev/null || true
check_command pnpm "pnpm" "-v" 2>/dev/null || true
echo ""

echo "üîß Build Tools & Compilers:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
check_command tsc "TypeScript" "-v"
check_command vite "Vite" "--version"
check_command esbuild "esbuild" "--version"
echo ""

echo "üß™ Testing:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
check_command vitest "Vitest" "--version"
echo ""

echo "üé® Code Quality:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
check_command eslint "ESLint" "--version"
check_command prettier "Prettier" "--version"
echo ""

echo "üêô Version Control:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
check_command git "Git" "--version"
check_command gh "GitHub CLI" "--version" 2>/dev/null || echo "‚ö†Ô∏è  gh (GitHub CLI) - n√£o encontrado (opcional)"
echo ""

echo "üóÑÔ∏è  Database Tools:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
check_command supabase "Supabase CLI" "--version" 2>/dev/null || echo "‚ö†Ô∏è  supabase - n√£o encontrado (opcional para desenvolvimento local)"
echo ""

echo "üñºÔ∏è  Image Processing:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
check_command sharp "Sharp" "--version" 2>/dev/null || echo "‚ö†Ô∏è  sharp - dispon√≠vel via npm (usado para otimiza√ß√£o de avatars)"
echo ""

echo "üåê Network Tools:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
check_command curl "curl" "--version" | head -n 1
check_command wget "wget" "--version" | head -n 1
echo ""

echo "üìù Editors & Utilities:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
check_command vim "vim" "--version" | head -n 1
check_command nano "nano" "--version" 2>&1 | head -n 1
echo ""

# ================================================
# VERIFICA√á√ÉO DE DEPEND√äNCIAS DO PROJETO
# ================================================
echo "üìö Depend√™ncias do Projeto:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

if [ -f "package.json" ]; then
    echo "‚úÖ package.json encontrado"

    # Verificar node_modules
    if [ -d "node_modules" ]; then
        echo "‚úÖ node_modules existe"

        # Contar pacotes instalados
        PKG_COUNT=$(find node_modules -maxdepth 1 -type d | wc -l)
        echo "   üì¶ $PKG_COUNT pacotes instalados"
    else
        echo "‚ùå node_modules n√£o encontrado"
        echo "   üí° Execute: npm install"
    fi

    # Verificar scripts dispon√≠veis
    echo ""
    echo "üéØ Scripts dispon√≠veis:"
    node -pe "Object.keys(require('./package.json').scripts).map(s => '   ‚Ä¢ ' + s).join('\n')"
else
    echo "‚ùå package.json n√£o encontrado"
fi
echo ""

# ================================================
# VERIFICA√á√ÉO DE CONFIGURA√á√ïES
# ================================================
echo "‚öôÔ∏è  Arquivos de Configura√ß√£o:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

check_file() {
    if [ -f "$1" ]; then
        echo "‚úÖ $1"
    else
        echo "‚ùå $1"
    fi
}

check_file "tsconfig.json"
check_file "tsconfig.app.json"
check_file "vite.config.ts"
check_file "tailwind.config.js"
check_file "eslint.config.js"
check_file ".prettierrc"
check_file "vitest.config.ts"
check_file ".env"
check_file "CLAUDE.md"
check_file ".claude/settings.json"
echo ""

# ================================================
# VERIFICA√á√ÉO DE AMBIENTE
# ================================================
echo "üåç Vari√°veis de Ambiente:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

if [ -f ".env" ]; then
    echo "‚úÖ Arquivo .env existe"

    # Verificar vari√°veis cr√≠ticas (sem mostrar valores)
    check_env_var() {
        if grep -q "^$1=" .env 2>/dev/null; then
            echo "‚úÖ $1 definido"
        else
            echo "‚ùå $1 n√£o definido"
        fi
    }

    check_env_var "VITE_SUPABASE_URL"
    check_env_var "VITE_SUPABASE_ANON_KEY"
else
    echo "‚ö†Ô∏è  Arquivo .env n√£o encontrado"
    echo "   üí° Copie .env.example e configure as vari√°veis"
fi
echo ""

# ================================================
# RESUMO FINAL
# ================================================
echo "üìä Resumo:"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# Verifica√ß√µes cr√≠ticas
CRITICAL_OK=true

if ! command -v node >/dev/null 2>&1; then
    echo "‚ùå Node.js n√£o encontrado (CR√çTICO)"
    CRITICAL_OK=false
fi

if ! command -v npm >/dev/null 2>&1; then
    echo "‚ùå npm n√£o encontrado (CR√çTICO)"
    CRITICAL_OK=false
fi

if [ ! -d "node_modules" ]; then
    echo "‚ö†Ô∏è  node_modules n√£o encontrado - execute 'npm install'"
    CRITICAL_OK=false
fi

if [ ! -f ".env" ]; then
    echo "‚ö†Ô∏è  .env n√£o configurado"
fi

if $CRITICAL_OK; then
    echo "‚úÖ Ambiente pronto para desenvolvimento!"
else
    echo "‚ùå Alguns requisitos cr√≠ticos n√£o foram atendidos"
    echo "   Resolva os problemas acima antes de continuar"
fi

echo ""
echo "üí° Dica: Execute 'npm run dev' para iniciar o servidor de desenvolvimento"
echo ""
