# üéØ ClubNath VIP - Cursor Rules
# Progressive Web App para Comunidade de M√£es

## üìã CONTEXTO DO PROJETO

**Tipo:** Progressive Web App (PWA) Mobile-First  
**Tech Stack:** React 18.3 + TypeScript 5.5 + Vite 7.1 + TailwindCSS + Supabase  
**Arquitetura:** Feature-based com Clean Architecture  
**P√∫blico:** Comunidade exclusiva de m√£es seguidoras da Nath√°lia Valente  

## üèóÔ∏è ARQUITETURA E PADR√ïES

### Estrutura de Pastas
```
src/
‚îú‚îÄ‚îÄ components/          # Componentes reutiliz√°veis
‚îÇ   ‚îú‚îÄ‚îÄ ui/             # Design system (Button, Input, etc)
‚îÇ   ‚îî‚îÄ‚îÄ shared/         # Componentes de neg√≥cio compartilhados
‚îú‚îÄ‚îÄ features/           # Features completas (feature-based)
‚îÇ   ‚îú‚îÄ‚îÄ auth/           # Autentica√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ chat/           # Chat e mensagens
‚îÇ   ‚îú‚îÄ‚îÄ connections/    # Sistema de conex√µes
‚îÇ   ‚îú‚îÄ‚îÄ groups/         # Grupos tem√°ticos
‚îÇ   ‚îú‚îÄ‚îÄ health/         # Funcionalidades de sa√∫de
‚îÇ   ‚îú‚îÄ‚îÄ posts/          # Posts e feed social
‚îÇ   ‚îú‚îÄ‚îÄ safety/         # Recursos de seguran√ßa
‚îÇ   ‚îî‚îÄ‚îÄ shop/           # E-commerce
‚îú‚îÄ‚îÄ lib/                # Bibliotecas e configura√ß√µes
‚îú‚îÄ‚îÄ hooks/              # React hooks customizados
‚îú‚îÄ‚îÄ contexts/           # Context providers
‚îú‚îÄ‚îÄ services/           # L√≥gica de neg√≥cio
‚îú‚îÄ‚îÄ utils/              # Fun√ß√µes utilit√°rias
‚îî‚îÄ‚îÄ types/              # TypeScript types
```

### Padr√µes Obrigat√≥rios

#### 1. **Feature-Based Architecture**
- Cada feature deve ser auto-contida
- Componentes espec√≠ficos dentro de `features/[nome]/components/`
- Hooks espec√≠ficos em `features/[nome]/hooks/`
- Services espec√≠ficos em `features/[nome]/services/`

#### 2. **TypeScript Strict Mode**
- Sempre use TypeScript com strict mode
- Defina interfaces para todos os props
- Use generics quando apropriado
- Evite `any` - use `unknown` se necess√°rio

#### 3. **Componentes Funcionais com Hooks**
```typescript
// ‚úÖ Padr√£o correto
interface ButtonProps {
  variant: 'primary' | 'secondary';
  size: 'sm' | 'md' | 'lg';
  children: React.ReactNode;
  onClick?: () => void;
}

export const Button: React.FC<ButtonProps> = ({ 
  variant, 
  size, 
  children, 
  onClick 
}) => {
  return (
    <button 
      className={`btn btn-${variant} btn-${size}`}
      onClick={onClick}
    >
      {children}
    </button>
  );
};
```

## üé® DESIGN SYSTEM E UI

### TailwindCSS + NativeWind
- Use classes TailwindCSS para estiliza√ß√£o
- Mantenha consist√™ncia com design system
- Mobile-first approach obrigat√≥rio
- Use vari√°veis CSS para temas

### Componentes UI Padr√£o
```typescript
// Exemplo de componente UI
interface CardProps {
  title: string;
  children: React.ReactNode;
  variant?: 'default' | 'elevated' | 'outlined';
}

export const Card: React.FC<CardProps> = ({ 
  title, 
  children, 
  variant = 'default' 
}) => {
  const baseClasses = 'rounded-lg p-4';
  const variantClasses = {
    default: 'bg-white shadow-sm',
    elevated: 'bg-white shadow-lg',
    outlined: 'bg-white border border-gray-200'
  };
  
  return (
    <div className={`${baseClasses} ${variantClasses[variant]}`}>
      <h3 className="text-lg font-semibold mb-2">{title}</h3>
      {children}
    </div>
  );
};
```

## üîÑ GERENCIAMENTO DE ESTADO

### React Query + Context API
- Use React Query para cache de dados do servidor
- Use Context API para estado global da aplica√ß√£o
- Use useState/useReducer para estado local

### Padr√£o de Hooks
```typescript
// Hook customizado para dados
export const usePosts = () => {
  return useQuery({
    queryKey: ['posts'],
    queryFn: () => postsService.getAll(),
    staleTime: 5 * 60 * 1000, // 5 minutos
  });
};

// Hook para mutations
export const useCreatePost = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: postsService.create,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['posts'] });
    },
  });
};
```

## üîê SEGURAN√áA E VALIDA√á√ÉO

### Valida√ß√£o de Inputs
- Sempre valide inputs do usu√°rio
- Use bibliotecas como Zod para valida√ß√£o
- Sanitize HTML para prevenir XSS

### Supabase RLS
- Todas as queries devem respeitar Row Level Security
- Use policies adequadas para cada tabela
- Valide permiss√µes no frontend E backend

### Exemplo de Valida√ß√£o
```typescript
import { z } from 'zod';

const postSchema = z.object({
  content: z.string().min(1).max(1000),
  imageUrl: z.string().url().optional(),
  groupId: z.string().uuid(),
});

type PostData = z.infer<typeof postSchema>;

export const useCreatePost = () => {
  return useMutation({
    mutationFn: async (data: PostData) => {
      const validatedData = postSchema.parse(data);
      return postsService.create(validatedData);
    },
  });
};
```

## üì± PWA E MOBILE-FIRST

### Responsividade
- Sempre mobile-first
- Use breakpoints: sm (640px), md (768px), lg (1024px), xl (1280px)
- Teste em dispositivos m√≥veis reais

### PWA Features
- Service Worker para cache
- Manifest.json configurado
- √çcones em m√∫ltiplos tamanhos
- Offline-first quando poss√≠vel

## üß™ TESTES

### Estrat√©gia de Testes
- **Unit Tests:** Hooks, utilities, componentes isolados
- **Integration Tests:** Fluxos completos de features
- **E2E Tests:** Jornadas cr√≠ticas de usu√°rio

### Padr√£o de Testes
```typescript
// Exemplo de teste de componente
import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from './Button';

describe('Button', () => {
  it('should render with correct text', () => {
    render(<Button>Click me</Button>);
    expect(screen.getByText('Click me')).toBeInTheDocument();
  });

  it('should call onClick when clicked', () => {
    const handleClick = vi.fn();
    render(<Button onClick={handleClick}>Click me</Button>);
    
    fireEvent.click(screen.getByText('Click me'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
});
```

## üöÄ PERFORMANCE

### Otimiza√ß√µes Obrigat√≥rias
- Lazy loading de componentes pesados
- Memoiza√ß√£o com React.memo quando apropriado
- useMemo e useCallback para c√°lculos pesados
- Code splitting por rota

### Bundle Size
- Mantenha bundle < 200KB (vendor + app)
- Use dynamic imports para bibliotecas grandes
- Otimize imagens (WebP, lazy loading)

## üìù CONVEN√á√ïES DE C√ìDIGO

### Nomenclatura
- **Componentes:** PascalCase (`UserProfile`)
- **Hooks:** camelCase com prefixo `use` (`useUserData`)
- **Services:** camelCase (`userService`)
- **Types/Interfaces:** PascalCase (`UserProfile`, `ApiResponse`)
- **Constantes:** UPPER_SNAKE_CASE (`API_BASE_URL`)

### Imports
```typescript
// Ordem dos imports
// 1. React e bibliotecas externas
import React from 'react';
import { useQuery } from '@tanstack/react-query';

// 2. Imports internos (relativos)
import { Button } from '@/components/ui/Button';
import { usePosts } from '@/features/posts/hooks/usePosts';

// 3. Imports de tipos
import type { Post } from '@/types/post';
```

### Commits
- Use Conventional Commits
- Exemplos: `feat: add user profile page`, `fix: resolve chat message ordering`

## üîß FERRAMENTAS E CONFIGURA√á√ïES

### ESLint + Prettier
- C√≥digo deve passar no ESLint sem erros
- Prettier deve formatar automaticamente
- Use pre-commit hooks

### TypeScript
- Sempre use strict mode
- Evite `any`, use `unknown` se necess√°rio
- Defina tipos expl√≠citos para APIs

## üéØ REGRAS ESPEC√çFICAS DO CLUBNATH

### Comunidade de M√£es
- Linguagem respeitosa e inclusiva
- Foco em seguran√ßa e privacidade
- Design acolhedor e maternal
- Funcionalidades espec√≠ficas para m√£es

### Features Principais
- **Feed Social:** Compartilhamento seguro de momentos
- **Grupos Tem√°ticos:** Discuss√µes focadas
- **Chat Privado:** Mensagens seguras
- **Estudos B√≠blicos:** Conte√∫do espiritual
- **Loja Premium:** Produtos exclusivos

### Acessibilidade
- Suporte a leitores de tela
- Contraste adequado
- Navega√ß√£o por teclado
- Textos alternativos em imagens

## üö® REGRAS DE SEGURAN√áA

### Dados Sens√≠veis
- NUNCA commite chaves de API
- Use vari√°veis de ambiente
- Valide todos os inputs
- Sanitize HTML

### Privacidade
- Dados de m√£es s√£o sens√≠veis
- Implemente RLS adequadamente
- Logs n√£o devem conter dados pessoais
- Use HTTPS sempre

## üìö RECURSOS √öTEIS

### Documenta√ß√£o
- [React Query Docs](https://tanstack.com/query/latest)
- [TailwindCSS Docs](https://tailwindcss.com/docs)
- [Supabase Docs](https://supabase.com/docs)
- [PWA Guide](https://web.dev/progressive-web-apps/)

### Ferramentas
- Vite para build
- Vitest para testes
- Playwright para E2E
- Sentry para monitoramento

---

**Lembre-se:** Este √© um projeto para uma comunidade especial de m√£es. Sempre priorize seguran√ßa, privacidade e uma experi√™ncia acolhedora! üíñ