# ClubNath VIP - React Native + Expo + Supabase + TypeScript

## üéØ CONTEXTO DO PROJETO
- **App**: ClubNath VIP - Comunidade exclusiva da Nath√°lia Valente
- **Influenciadora**: 35M seguidores, CEO NAVA, R$3-4M receita anual
- **Estrat√©gia**: Monetiza√ß√£o passiva via licenciamento de imagem
- **Target**: M√£es, zero fric√ß√£o de download (PWA), experi√™ncia premium

## Stack Tecnol√≥gica
- React Native 0.74+ / Expo SDK 51+
- TypeScript (strict mode)
- Supabase (auth, database, realtime, storage)
- React Query (TanStack Query) para data fetching
- NativeWind para styling
- React Navigation 6.x
- React Hook Form + Zod para valida√ß√£o
- PWA (Progressive Web App) para zero fric√ß√£o

## Estrutura de Pastas
src/
‚îú‚îÄ‚îÄ api/           # React Query hooks
‚îú‚îÄ‚îÄ components/ui/ # Design system components
‚îú‚îÄ‚îÄ features/      # Feature-based modules
‚îú‚îÄ‚îÄ lib/supabase/  # Supabase client e helpers
‚îú‚îÄ‚îÄ navigation/    # Navigation config
‚îú‚îÄ‚îÄ types/         # TypeScript types
‚îî‚îÄ‚îÄ utils/         # Utility functions

## Regras CR√çTICAS (nunca viole)

### ANTES de criar QUALQUER arquivo novo
1. SEMPRE busque arquivos similares em @components/, @hooks/, @services/
2. Se encontrar c√≥digo similar, REUTILIZE ou ESTENDA ao inv√©s de duplicar
3. NUNCA crie arquivos com nomes: Component2, utils-new, service-copy
4. PERGUNTE se devo reutilizar c√≥digo existente ou criar novo

### Conven√ß√µes de C√≥digo
- Componentes funcionais com hooks (zero classes)
- TypeScript strict, sem 'any'
- Imports absolutos: @/components n√£o ../../../
- camelCase para fun√ß√µes/vari√°veis
- PascalCase para componentes
- Indenta√ß√£o: 2 espa√ßos
- Sempre use StyleSheet.create() para estilos

### React Native Espec√≠fico
- SafeAreaView para compatibilidade iOS
- Platform.OS para c√≥digo espec√≠fico de plataforma
- KeyboardAvoidingView para formul√°rios
- FlatList com windowSize otimizado para listas longas
- Testes em iOS E Android obrigat√≥rios

### Supabase Patterns
- Sempre use React Query para queries do Supabase
- Pol√≠ticas RLS documentadas em cada query
- Erro handling consistente com try/catch
- Auth state gerenciado por Context
- AsyncStorage para session persistence

### Preven√ß√£o de Duplicatas
- Antes de criar hook, verificar @hooks/
- Antes de criar service, verificar @lib/supabase/
- Antes de criar componente UI, verificar @components/ui/
- Se similar existe, PARE e pergunte antes de criar novo

### Git Workflow
- Branches: feature/TASK-123-descricao
- Commits: [TASK-123] Descri√ß√£o clara
- SEMPRE rodar testes antes de commit
- NUNCA commit com console.log em produ√ß√£o

### Qualidade Obrigat√≥ria
- Zero warnings do ESLint
- Zero erros do TypeScript
- Cobertura m√≠nima de testes: 80%
- Componentes novos = testes novos
- Error boundaries em todas as screens

## O que N√ÉO fazer

‚ùå Adicionar elementos de UI n√£o solicitados
‚ùå Modificar √°reas de layout n√£o mencionadas
‚ùå Criar solu√ß√µes complexas quando simples funciona
‚ùå Duplicar c√≥digo existente
‚ùå Usar 'any' no TypeScript
‚ùå Pular tratamento de erros
‚ùå Esquecer acessibilidade (labels, roles)
‚ùå Commitar c√≥digo com placeholders/TODOs

## Comandos de Desenvolvimento
npm start              # Inicia Expo dev server
npm run ios            # iOS simulator
npm run android        # Android emulator
npm test               # Roda testes
npm run lint           # ESLint
npm run type-check     # TypeScript check

## Antes de Responder
1. Analise c√≥digo existente em @Codebase
2. Verifique se funcionalidade j√° existe
3. Identifique padr√µes estabelecidos no projeto
4. Proponha solu√ß√£o que segue os padr√µes
5. Mencione se est√° reutilizando ou criando c√≥digo novo