name: CI - Build & Test

on:
  push:
    branches:
      - '**'  # Run on all branches
  pull_request:
    branches:
      - '**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run typecheck
        continue-on-error: false

      - name: Run tests
        run: npm run test:run
        continue-on-error: false

      - name: Build application
        run: npm run build
        continue-on-error: false

      - name: Check build size
        run: |
          echo "üì¶ Build size analysis:"
          du -sh dist
          echo ""
          echo "üìÑ Main files:"
          find dist/assets -type f -name "*.js" -o -name "*.css" | while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "  - $(basename $file): $size"
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.node-version == '20.x'
        with:
          name: build-dist
          path: dist/
          retention-days: 7

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true  # Don't fail build on lint errors

  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "üîç Running security audit..."
          npm audit --audit-level=moderate || true

      - name: Check for vulnerabilities
        run: |
          AUDIT_RESULT=$(npm audit --json --audit-level=high)
          VULNERABILITIES=$(echo $AUDIT_RESULT | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical')

          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "‚ö†Ô∏è  Found $VULNERABILITIES high/critical vulnerabilities"
            echo "Run 'npm audit fix' to fix them"
            exit 1
          else
            echo "‚úÖ No high/critical vulnerabilities found"
          fi

  success:
    runs-on: ubuntu-latest
    needs: [build-and-test, lint, security]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ needs.build-and-test.result }}" != "success" ]; then
            echo "‚ùå Build and test failed"
            exit 1
          fi

          if [ "${{ needs.lint.result }}" == "failure" ]; then
            echo "‚ö†Ô∏è  Lint failed but not blocking"
          fi

          if [ "${{ needs.security.result }}" != "success" ]; then
            echo "‚ùå Security check failed"
            exit 1
          fi

          echo "‚úÖ All checks passed!"
