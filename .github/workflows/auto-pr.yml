name: Auto Pull Request

on:
  push:
    branches:
      - 'feature/*'
      - 'bugfix/*'
      - 'hotfix/*'
      - 'develop'
      - 'dev'
    # Evita executar em pushes para main/master
    branches-ignore:
      - 'main'
      - 'master'

jobs:
  auto-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get branch info
        id: branch-info
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Determina a branch base baseada no nome da branch
          if [[ $BRANCH_NAME == hotfix/* ]]; then
            BASE_BRANCH="main"
          elif [[ $BRANCH_NAME == feature/* ]] || [[ $BRANCH_NAME == bugfix/* ]]; then
            BASE_BRANCH="develop"
          elif [[ $BRANCH_NAME == "develop" ]] || [[ $BRANCH_NAME == "dev" ]]; then
            BASE_BRANCH="main"
          else
            BASE_BRANCH="main"
          fi
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT

      - name: Check if PR already exists
        id: check-pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.branch-info.outputs.branch_name }}"
          BASE_BRANCH="${{ steps.branch-info.outputs.base_branch }}"
          
          # Verifica se j√° existe um PR para esta branch
          PR_EXISTS=$(gh pr list --head "$BRANCH_NAME" --base "$BASE_BRANCH" --json number --jq '. | length')
          echo "pr_exists=$PR_EXISTS" >> $GITHUB_OUTPUT

      - name: Get commit info
        id: commit-info
        if: steps.check-pr.outputs.pr_exists == '0'
        run: |
          # Pega o √∫ltimo commit
          LAST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          LAST_COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          
          # Gera t√≠tulo do PR baseado no nome da branch e √∫ltimo commit
          BRANCH_NAME="${{ steps.branch-info.outputs.branch_name }}"
          
          if [[ $BRANCH_NAME == feature/* ]]; then
            PR_TITLE="‚ú® Feature: ${BRANCH_NAME#feature/}"
          elif [[ $BRANCH_NAME == bugfix/* ]]; then
            PR_TITLE="üêõ Bug Fix: ${BRANCH_NAME#bugfix/}"
          elif [[ $BRANCH_NAME == hotfix/* ]]; then
            PR_TITLE="üö® Hotfix: ${BRANCH_NAME#hotfix/}"
          elif [[ $BRANCH_NAME == "develop" ]] || [[ $BRANCH_NAME == "dev" ]]; then
            PR_TITLE="üöÄ Development Update"
          else
            PR_TITLE="üìù Update: $BRANCH_NAME"
          fi
          
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "last_commit_msg=$LAST_COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "last_commit_author=$LAST_COMMIT_AUTHOR" >> $GITHUB_OUTPUT

      - name: Get changed files
        id: changed-files
        if: steps.check-pr.outputs.pr_exists == '0'
        run: |
          BASE_BRANCH="${{ steps.branch-info.outputs.base_branch }}"
          
          # Busca a branch base remota
          git fetch origin $BASE_BRANCH
          
          # Lista arquivos alterados
          CHANGED_FILES=$(git diff --name-only origin/$BASE_BRANCH..HEAD | head -20)
          
          # Conta o n√∫mero de arquivos alterados
          FILES_COUNT=$(echo "$CHANGED_FILES" | wc -l)
          
          # Converte para lista markdown
          CHANGED_FILES_MD=""
          while IFS= read -r file; do
            if [ ! -z "$file" ]; then
              CHANGED_FILES_MD="$CHANGED_FILES_MD- \`$file\`"$'\n'
            fi
          done <<< "$CHANGED_FILES"
          
          echo "changed_files_md<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES_MD" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "files_count=$FILES_COUNT" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.check-pr.outputs.pr_exists == '0'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.branch-info.outputs.branch_name }}"
          BASE_BRANCH="${{ steps.branch-info.outputs.base_branch }}"
          PR_TITLE="${{ steps.commit-info.outputs.pr_title }}"
          LAST_COMMIT_MSG="${{ steps.commit-info.outputs.last_commit_msg }}"
          LAST_COMMIT_AUTHOR="${{ steps.commit-info.outputs.last_commit_author }}"
          CHANGED_FILES_MD="${{ steps.changed-files.outputs.changed_files_md }}"
          FILES_COUNT="${{ steps.changed-files.outputs.files_count }}"
          
          # Cria o corpo do PR
          PR_BODY="## üìã Resumo
          
          Pull Request criado automaticamente para a branch \`$BRANCH_NAME\`.
          
          **√öltimo commit:** $LAST_COMMIT_MSG
          **Autor:** $LAST_COMMIT_AUTHOR
          
          ## üìÅ Arquivos alterados ($FILES_COUNT arquivo(s))
          
          $CHANGED_FILES_MD
          
          ## ‚úÖ Checklist
          
          - [ ] C√≥digo revisado
          - [ ] Testes passando
          - [ ] Documenta√ß√£o atualizada
          - [ ] Build sem erros
          
          ## üîç Tipo de mudan√ßa
          
          - [ ] Bug fix (mudan√ßa que corrige um problema)
          - [ ] Nova feature (mudan√ßa que adiciona funcionalidade)
          - [ ] Breaking change (mudan√ßa que quebra compatibilidade)
          - [ ] Documenta√ß√£o
          - [ ] Refatora√ß√£o
          
          ---
          
          *Este PR foi criado automaticamente pelo GitHub Actions.*"
          
          # Determina labels baseadas no tipo da branch
          LABELS=""
          if [[ $BRANCH_NAME == feature/* ]]; then
            LABELS="--label enhancement,feature"
          elif [[ $BRANCH_NAME == bugfix/* ]]; then
            LABELS="--label bug,bugfix"
          elif [[ $BRANCH_NAME == hotfix/* ]]; then
            LABELS="--label bug,hotfix,urgent"
          elif [[ $BRANCH_NAME == "develop" ]] || [[ $BRANCH_NAME == "dev" ]]; then
            LABELS="--label development"
          fi
          
          # Cria o PR
          gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base "$BASE_BRANCH" \
            --head "$BRANCH_NAME" \
            $LABELS \
            --draft=false
          
          echo "‚úÖ Pull Request criado com sucesso!"
          
          # Mostra o link do PR criado
          PR_URL=$(gh pr view "$BRANCH_NAME" --json url --jq .url)
          echo "üîó PR URL: $PR_URL"